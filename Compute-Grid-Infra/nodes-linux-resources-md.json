{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "nodeSettings": {
      "type": "object",
      "metadata": {
        "Description": "node settings object"
      }
    },
    "nodeOSSettings": {
      "type": "object",
      "metadata": {
        "Description": "node OS settings object"
      }
    },
    "vmssName": {
      "type": "string",
      "metadata": {
        "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
      },
      "maxLength": 61
    },
    "instanceCount": {
      "type": "int",
      "metadata": {
        "description": "Number of VM instances (1000 or less)."
      },
      "maxValue": 1000
    },
    "newStorageAccountSuffix": {
      "type": "string"
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "password for the Virtual Machine."
      }
    },
    "postInstallCommand": {
      "type": "string",
            "metadata": {
        "description": "post install command to run as a post script install"
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "namingInfix": "[toLower(take(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 9))]",
    "vnetID": "[resourceId(parameters('nodeSettings').vnetRG, 'Microsoft.Network/virtualNetworks', parameters('nodeSettings').vnetName)]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('nodeSettings').subnetName)]",
    "nicName": "[concat(variables('namingInfix'), 'nic')]",
    "lbName": "[concat(variables('namingInfix'), 'lb')]",
    "pipName": "[concat(variables('namingInfix'), 'pip')]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers/', variables('lbName'))]",
    "nsgName":  "nsg-compute",

    "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
    "computeApiVersion": "2017-03-30",
    "networkApiVersion": "2016-06-01",
    "natStartPort": 50000,
    "natEndPort": 50119,
    "natBackendPort": 22,
    "ScriptsOptions": {
      "none": {
        "params": ""
      },
      "nfsonmaster": {
        "params": " -S nfsonmaster"
      },
      "beegfs": {
        "params": " -S beegfs"
      },
       "otherstorage": {        
        "params": " -S otherstorage"
      },
      "ganglia": {
        "params": " -n ganglia"
      },
      "pbspro": {
        "params": "[concat(' -s pbspro -q ', parameters('vmssName'))]"
      },
      "master": {
        "params": "[concat(' -m ', parameters('nodeSettings').MasterName)]"
      },
      "nasname": {
        "params": "[concat(' -x ', parameters('nodeSettings').nasname)]"
      },
      "nasdevice": {
        "params": "[concat(' -y ', parameters('nodeSettings').nasdevice)]"
      },
      "nasmount": {
        "params": "[concat(' -z ', parameters('nodeSettings').mountPoint)]"
      },
      "dnsServerName": {
        "params": "[concat(' -f ', parameters('nodeSettings').dnsServerName)]"
      },
      "dnsServerIP": {
        "params": "[concat(' -g ', parameters('nodeSettings').dnsServerIP)]"
      },
      "nisDomainName": {
        "params": "[concat(' -h ', parameters('nodeSettings').nisDomainName)]"
      },
      "nisDomainIP": {
        "params": "[concat(' -i ', parameters('nodeSettings').nisDomainIP)]"
      },        
      "nfsservername": {
        "params": "[concat(' -k ', parameters('nodeSettings').nfsservername)]"
      },
      "postinstall": {
        "params": "[concat(' -c ', parameters('postInstallCommand'))]"
      }
    },
    "cnSetupScript": "cn-setup.sh",
    "vmScripts": {
      "scriptsToDownload": [
        "[uri(deployment().properties.templateLink.uri, variables('cnSetupScript'))]",
        "[uri(deployment().properties.templateLink.uri, 'BeeGFS/install_beegfs.sh')]",
        "[uri(deployment().properties.templateLink.uri, 'PBSPro/install_pbspro.sh')]",
        "[uri(deployment().properties.templateLink.uri, 'PBSPro/pbs_selfregister.sh')]",
        "[uri(deployment().properties.templateLink.uri, 'otherstorage/other_nas.sh')]",
        "[uri(deployment().properties.templateLink.uri, 'Ganglia/install_ganglia.sh')]"
      ],
      "commandToExecute": "[concat('bash ', variables('cnSetupScript'), variables('ScriptsOptions')['master'].params, variables('ScriptsOptions')['nasname'].params, variables('ScriptsOptions')['nasdevice'].params, variables('ScriptsOptions')['nasmount'].params, variables('ScriptsOptions')['dnsServerName'].params, variables('ScriptsOptions')['dnsServerIP'].params,variables('ScriptsOptions')['nisDomainName'].params,variables('ScriptsOptions')['nisDomainIP'].params, variables('ScriptsOptions')[parameters('nodeSettings').scheduler].params, variables('ScriptsOptions')[parameters('nodeSettings').sharedStorage].params, variables('ScriptsOptions')[parameters('nodeSettings').monitoring].params, variables('ScriptsOptions')['postinstall'].params, variables('ScriptsOptions')['nfsservername'].params)]"
    },
    "sshKeyPath": "[concat('/home/',parameters('nodeOSSettings').adminUserName,'/.ssh/authorized_keys')]"
  },
  "resources": [

     {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[variables('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh-rule",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "web-rule",
            "properties": {
              "description": "Allow Web",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1000,
              "direction": "Inbound"
            }
          },
          {
            "name": "beegfs-admon",
            "properties": {
              "description": "Allow BeeGFS admin UI",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8000",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 2000,
              "direction": "Inbound"
            }
          }
        ]
      }
    },

    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "apiVersion": "2016-09-01",
      "location": "[variables('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "privateIPAllocationMethod": "Dynamic"
             
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        }
      },
      "dependsOn": [              
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]"
      ]
    },

    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('vmssName')]",
      "location": "[variables('location')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('nodeSettings').VMsku]"
        },
        "osProfile": {
          "computerName": "[parameters('vmssName')]",
          "adminUsername": "[parameters('nodeOSSettings').adminUserName]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": "[parameters('nodeOSSettings').imageReference]",
          "osDisk": {
            "createOption": "FromImage",
            "caching": "ReadOnly"
          },
          "dataDisks": [ ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name":  "[concat(parameters('vmssName'),'/installCN')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmssName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": "[variables('vmScripts').scriptsToDownload]",
          "commandToExecute": "[variables('vmScripts').commandToExecute]",
          "timestamp": 12345
        }
      }
    }
  ]
}

